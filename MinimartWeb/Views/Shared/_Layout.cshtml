<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - MiniMart</title>

    <!-- CSS Libraries -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />

    <!-- Inline Styles -->
    <style>
        body {
            padding-top: 56px;
        }

        .navbar-brand img {
            height: 40px;
            width: auto;
        }

        .navbar-menu-link {
            color: rgba(0, 0, 0, 0.7);
            text-decoration: none;
            padding: 0.5rem 1rem;
            display: inline-flex;
            align-items: center;
            cursor: pointer;
        }

            .navbar-menu-link:hover {
                color: #000;
                background-color: rgba(0,0,0,.05);
                border-radius: .25rem;
            }

        .main-container {
            min-height: calc(100vh - 56px - 72px); /* Adjust footer height if different */
        }

        .footer-link {
            color: #6c757d;
            text-decoration: none;
            transition: color 0.2s;
        }

            .footer-link:hover {
                color: #0d6efd;
            }

        .popup-menu {
            position: absolute;
            background-color: white;
            border: 1px solid rgba(0,0,0,.125);
            border-radius: 0.25rem;
            z-index: 1050;
            display: none;
            min-width: 200px;
            padding: 0.5rem 0;
            box-shadow: 0 0.5rem 1rem rgba(0,0,0,.15);
        }

            .popup-menu.popup-visible {
                display: block;
            }

            .popup-menu li {
                padding: 0;
                border: none;
            }

            .popup-menu .dropdown-item {
                display: flex;
                align-items: center;
                padding: 0.5rem 1rem;
                color: #212529;
                text-decoration: none;
                white-space: nowrap;
                cursor: pointer;
            }

                .popup-menu .dropdown-item:hover {
                    background-color: #e9ecef;
                    color: #000;
                }

                .popup-menu .dropdown-item i {
                    margin-right: 0.75rem;
                    width: 16px;
                    text-align: center;
                    color: #6c757d;
                }

                .popup-menu .dropdown-item:hover i {
                    color: #000;
                }

            .popup-menu .dropdown-header {
                padding: 0.5rem 1rem;
                font-size: 0.875rem;
                color: #6c757d;
                font-weight: 600;
            }

            .popup-menu .dropdown-divider {
                height: 1px;
                margin: 0.5rem 0;
                overflow: hidden;
                background-color: #dee2e6;
                border: 0;
            }

        #accountDropdownMenu {
            padding-left: 0;
            list-style: none;
            margin-bottom: 0;
        }

        .logout-confirm-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 1055;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.2s ease-in-out, visibility 0.2s ease-in-out;
        }

            .logout-confirm-overlay.show {
                opacity: 1;
                visibility: visible;
            }

        .logout-confirm-panel {
            background-color: #fff;
            padding: 25px 30px;
            border-radius: 8px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            text-align: center;
            min-width: 320px;
            max-width: 90%;
            z-index: 1056;
            transform: scale(0.9);
            transition: transform 0.2s ease-in-out;
        }

        .logout-confirm-overlay.show .logout-confirm-panel {
            transform: scale(1);
        }

        .logout-confirm-panel h5 {
            margin-top: 0;
            margin-bottom: 15px;
            font-size: 1.25rem;
            font-weight: 600;
            color: #333;
        }

        .logout-confirm-panel p {
            margin-bottom: 25px;
            color: #555;
            font-size: 1rem;
        }

        .logout-confirm-buttons button {
            margin: 0 8px;
            min-width: 100px;
            padding: 8px 15px;
        }

        #logoutAjaxLink {
            cursor: pointer;
        }

        .login-panel-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 1060;
            display: flex;
            align-items: center;
            justify-content: center;
            opacity: 0;
            visibility: hidden;
            transition: opacity 0.2s ease-in-out, visibility 0.2s ease-in-out;
        }

            .login-panel-overlay.show {
                opacity: 1;
                visibility: visible;
            }

        .login-panel {
            position: relative;
            background-color: #fff;
            padding: 30px 35px;
            border-radius: 8px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
            width: 400px;
            max-width: 95%;
            z-index: 1061;
            transform: scale(0.9);
            transition: transform 0.2s ease-in-out;
        }

        .login-panel-overlay.show .login-panel {
            transform: scale(1);
        }

        .login-panel-close {
            position: absolute;
            top: 10px;
            right: 15px;
            padding: 0.5rem;
        }
    </style>
</head>
<body class="d-flex flex-column min-vh-100">
    <header>
        <nav class="navbar navbar-expand-lg navbar-light bg-white border-bottom box-shadow fixed-top">
            <div class="container-fluid">
                <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index" title="Trang chủ"><img src="~/images/MiniMartlogo.png" alt="MiniMart Logo"></a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation"><span class="navbar-toggler-icon"></span></button>
                <div class="collapse navbar-collapse" id="navbarSupportedContent">
                    @* Luôn hiển thị Menu Link và Search *@
                    <a id="menuToggleLink" class="navbar-menu-link d-none d-lg-flex me-3" href="#" role="button"> <i class="fas fa-bars me-1"></i> Menu </a>
                    <form class="d-flex search-form my-2 my-lg-0 flex-grow-1" role="search" asp-controller="CustomerProducts" asp-action="Search"> <input class="form-control me-2" type="search" placeholder="Tìm kiếm sản phẩm..." aria-label="Search" name="keyword"> <button class="btn btn-warning" type="submit"> <i class="fas fa-search text-white"></i> </button> </form>
                    <ul class="navbar-nav navbar-icons d-flex flex-row align-items-center ms-lg-auto">
                        @* Hiển thị Cart/Notification tùy điều kiện *@
                        @if (User.Identity != null && User.Identity.IsAuthenticated && User.IsInRole("Customer"))
                        {
                            <li class="nav-item me-3"> <a class="nav-link" asp-controller="Cart" asp-action="Index" title="Giỏ hàng"><i class="fas fa-shopping-cart fa-lg"></i></a> </li>
                            <li class="nav-item me-3"> <a class="nav-link" asp-controller="Notification" asp-action="Index" title="Thông báo"><i class="fas fa-bell fa-lg"></i></a> </li>
                        }
                        @* Hiển thị Login button hoặc User icon *@
                        @if (User.Identity != null && User.Identity.IsAuthenticated)
                        {
                            <li class="nav-item"> <a id="accountDropdownToggle" class="nav-link d-flex align-items-center" href="#" role="button" title="Tài khoản"><i class="fas fa-user-circle fa-lg"></i></a> </li>
                        }
                        else
                        {
                            <li class="nav-item"> <button type="button" id="ajaxLoginTrigger" class="btn btn-outline-primary btn-sm"> <i class="fas fa-sign-in-alt me-1"></i> Đăng nhập </button> </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>

    @* Popup Menu Sidebar (Chỉ render nếu đã đăng nhập và là nhân viên/admin?) *@
    @if (User.Identity != null && User.Identity.IsAuthenticated && (User.IsInRole("Admin") || User.IsInRole("Staff")))
    {
        <div id="menuSidebar" class="popup-menu shadow-sm">
            <ul class="list-group list-group-flush"> <li><a asp-controller="Categories" asp-action="Index" class="dropdown-item"><i class="fas fa-folder fa-fw me-2"></i>Loại sản phẩm</a></li> <li><a asp-controller="Product" asp-action="Index" class="dropdown-item"><i class="fas fa-box-open fa-fw me-2"></i>Sản phẩm</a></li> <li><a asp-controller="ProductTypes" asp-action="Index" class="dropdown-item"><i class="fas fa-tags fa-fw me-2"></i>Loại hàng hóa</a></li> <li><a asp-controller="Supplier" asp-action="Index" class="dropdown-item"><i class="fas fa-truck fa-fw me-2"></i>Nhà cung cấp</a></li> </ul>
        </div>
    }

    @* Popup Account Dropdown (Chỉ render khi đã đăng nhập) *@
    @if (User.Identity != null && User.Identity.IsAuthenticated)
    {
        <ul id="accountDropdownMenu" class="popup-menu shadow-sm">
            <li class="dropdown-header text-center">Xin chào, @User.Identity.Name!</li>
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item" asp-controller="Account" asp-action="Profile"><i class="fas fa-user fa-fw me-2"></i>Thông tin cá nhân</a></li>
            @if (User.IsInRole("Customer"))
            {
                <li><a class="dropdown-item" asp-controller="Order" asp-action="History"><i class="fas fa-receipt fa-fw me-2"></i>Lịch sử mua hàng</a></li>
            }
            @if (User.IsInRole("Admin") || User.IsInRole("Staff"))
            {
                <li><a class="dropdown-item" asp-controller="Employees" asp-action="Index"><i class="fas fa-user-tie fa-fw me-2"></i>Quản lý nhân viên</a></li>
                <li><a class="dropdown-item" asp-controller="Customers" asp-action="Index"><i class="fas fa-users fa-fw me-2"></i>Quản lý khách hàng</a></li>
                /* Thêm link quản lý khác */
            }
            <li><hr class="dropdown-divider"></li>
            <li> <a id="logoutAjaxLink" class="dropdown-item" href="#"> <i class="fas fa-sign-out-alt fa-fw me-2"></i>Đăng xuất </a> </li>
        </ul>
    }

    <div class="container main-container my-4 flex-grow-1">
        <main role="main" class="pb-3">
            @RenderBody()
        </main>
    </div>

    <footer class="footer mt-auto py-3 bg-light text-muted">
        <div class="container"> <div class="row gy-3"> <div class="col-lg-7 col-md-6"> <h5 class="mb-2">Thông tin liên hệ</h5> <ul class="list-unstyled mb-0"> <li class="mb-1 small"> <i class="fas fa-phone fa-fw me-1"></i> Hotline: <a href="tel:0123456789" class="footer-link">0123 456 789</a> </li> <li class="mb-1 small"> <i class="fas fa-envelope fa-fw me-1"></i> Email: <a href="mailto:siuers@siu.edu.vn" class="footer-link">siuers@siu.edu.vn</a> </li> <li class="mb-1 small"> <i class="fas fa-map-marker-alt fa-fw me-1"></i> Địa chỉ: 8C Tống Hữu Định, P. Thảo Điền, Q.2, TP.HCM </li> </ul> </div> <div class="col-lg-4 col-md-6 offset-lg-1"> <h5 class="mb-2">Về chúng tôi</h5> <ul class="list-unstyled mb-0"> <li class="mb-1 small"> <a asp-area="" asp-controller="Home" asp-action="About" class="footer-link">Giới thiệu</a> </li> <li class="mb-1 small"> <a asp-area="" asp-controller="Home" asp-action="Terms" class="footer-link">Điều khoản sử dụng</a> </li> <li class="mb-1 small"> <a asp-area="" asp-controller="Home" asp-action="Privacy" class="footer-link">Chính sách bảo mật</a> </li> </ul> </div> </div> <hr class="my-3"> <div class="row"> <div class="col-12 text-center"> <p class="mb-0 small">© @DateTime.Now.Year Bản quyền thuộc về Minimart.</p> </div> </div> </div>
    </footer>

    @* Panels AJAX (Render có điều kiện) *@
    @if (User.Identity != null && User.Identity.IsAuthenticated)
    {
        <div id="ajaxLogoutConfirmPanel" class="logout-confirm-overlay">
            <div class="logout-confirm-panel"> <h5>Xác nhận Đăng xuất</h5> <p>Bạn có chắc chắn muốn đăng xuất?</p> <div class="logout-confirm-buttons"> <button id="ajaxConfirmLogoutBtn" class="btn btn-danger btn-sm">Xác nhận</button> <button id="ajaxCancelLogoutBtn" class="btn btn-secondary btn-sm">Hủy</button> </div> </div>
        </div>
    }
    else
    {
        <div id="ajaxLoginPanel" class="login-panel-overlay">
            <div class="login-panel">
                <button type="button" class="btn-close login-panel-close" aria-label="Close"></button>
                <h4 class="text-center mb-4">Đăng nhập</h4>
                <form id="ajaxLoginForm" method="post" action="@Url.Action("Login", "Account")">
                    @Html.AntiForgeryToken() @* Token phải nằm trong form này *@
                    <div id="ajaxLoginErrorSummary" class="alert alert-danger mb-3" role="alert" style="display: none;"></div>
                    <div class="mb-3"> <label for="ajaxUsername" class="form-label">Tên đăng nhập</label> <input type="text" name="Username" class="form-control form-control-sm" id="ajaxUsername" required> <span class="text-danger d-block mt-1 small" id="ajaxUsernameError"></span> </div>
                    <div class="mb-3"> <label for="ajaxPassword" class="form-label">Mật khẩu</label> <input type="password" name="Password" class="form-control form-control-sm" id="ajaxPassword" required> <span class="text-danger d-block mt-1 small" id="ajaxPasswordError"></span> </div>
                    <div class="mb-3"> <label for="ajaxUserType" class="form-label">Bạn là:</label> <select name="UserType" class="form-select form-select-sm" id="ajaxUserType"> <option value="Customer" selected>Khách hàng</option> <option value="Employee">Nhân viên</option> </select> <span class="text-danger d-block mt-1 small" id="ajaxUserTypeError"></span> </div>
                    <div class="d-grid gap-2 mt-4"> <button type="submit" id="ajaxLoginSubmitBtn" class="btn btn-primary"> <i class="fas fa-sign-in-alt me-1"></i> Đăng nhập </button> </div>
                </form>
            </div>
        </div>
    }

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-C6RzsynM9kWDrMNeT87bh95OGNyZPhcTNXj1NW7RuBCsyN/o0jlpcV8Qyq46cDfL" crossorigin="anonymous"></script>

    @* ===== KHAI BÁO BIẾN TOÀN CỤC TRƯỚC TIÊN ===== *@
    <script>
        var activePopupHandlers = []; // Sử dụng var cho global scope chắc chắn
        console.log("Global activePopupHandlers initialized:", Array.isArray(activePopupHandlers));
    </script>
    @* ============================================ *@


    @* ===== SCRIPT CHÍNH TRONG DOMContentLoaded ===== *@
    <script>
        document.addEventListener('DOMContentLoaded', function () {

            console.log("DOMContentLoaded event fired.");
            // Kiểm tra lại biến toàn cục bên trong listener
            console.log("activePopupHandlers type inside DOMContentLoaded:", typeof activePopupHandlers, "Is Array:", Array.isArray(activePopupHandlers));
            // Đảm bảo nó là mảng, nếu không thì khởi tạo lại (dự phòng)
            if (!Array.isArray(activePopupHandlers)) {
                console.warn("activePopupHandlers was not an array inside DOMContentLoaded! Re-initializing.");
                activePopupHandlers = [];
            }


            // ----- CÁC HÀM HELPER VÀ KHỞI TẠO POPUP HANDLERS -----
            const navbar = document.querySelector('nav.navbar');
            const popupVisibleClass = 'popup-visible';
            const hideDelay = 150;

            // Hàm tạo popup handler
            function createPopupHandler(config) {
                const { triggerElement, popupElement, positionFunction, interactionType = 'click' } = config;
                if (!triggerElement || !popupElement || !navbar) { return null; }
                let leaveTimeout; let isVisible = false;
                const updateVisibility = () => { isVisible = popupElement.classList.contains(popupVisibleClass); };
                const show = () => {
                    // Sử dụng biến activePopupHandlers đã được đảm bảo là mảng
                    activePopupHandlers.forEach(handler => { if (handler && handler.popupElement !== popupElement && handler.isVisible) { handler.hide(true); } });
                    clearTimeout(leaveTimeout);
                    if (positionFunction) { positionFunction(triggerElement, popupElement, navbar); }
                    popupElement.classList.add(popupVisibleClass); updateVisibility();
                };
                const hide = (immediate = false) => {
                    clearTimeout(leaveTimeout);
                    if (immediate || interactionType === 'click') { popupElement.classList.remove(popupVisibleClass); updateVisibility(); }
                    else { leaveTimeout = setTimeout(() => { if (!popupElement.matches(':hover')) { popupElement.classList.remove(popupVisibleClass); updateVisibility(); } }, hideDelay); }
                };
                const toggle = (e) => { e.preventDefault(); if (isVisible) { hide(true); } else { show(); } };
                if (interactionType === 'click') { triggerElement.addEventListener('click', toggle); popupElement.addEventListener('click', (e) => e.stopPropagation()); }
                else if (interactionType === 'hover') { triggerElement.addEventListener('mouseenter', show); triggerElement.addEventListener('mouseleave', () => hide(false)); popupElement.addEventListener('mouseenter', () => clearTimeout(leaveTimeout)); popupElement.addEventListener('mouseleave', () => hide(false)); }
                return { triggerElement, popupElement, show, hide, toggle, position: () => { if (positionFunction) positionFunction(triggerElement, popupElement, navbar); }, get isVisible() { updateVisibility(); return isVisible; } };
            }

            // Hàm định vị popup
            const positionMenuSidebar = (trigger, popup, nav) => { if (!trigger || !popup || !nav) return; const n = nav.getBoundingClientRect(), i = trigger.getBoundingClientRect(); popup.style.position = 'fixed'; popup.style.top = `${n.bottom + 1}px`; popup.style.left = `${i.left}px`; popup.style.right = 'auto'; popup.style.transform = 'translateY(0)'; };
            const positionAccountDropdown = (trigger, popup, nav) => { if (!trigger || !popup || !nav) return; const n = nav.getBoundingClientRect(); popup.style.position = 'fixed'; popup.style.top = `${n.bottom + 1}px`; const i = 10; popup.style.right = `${i}px`; popup.style.left = 'auto'; popup.style.transform = 'translateY(0)'; };

            // Khởi tạo Menu Handler (nếu có)
            const menuToggleLink = document.getElementById('menuToggleLink');
            const menuSidebar = document.getElementById('menuSidebar');
            if (menuToggleLink && menuSidebar) {
                const menuHandler = createPopupHandler({ triggerElement: menuToggleLink, popupElement: menuSidebar, positionFunction: positionMenuSidebar, interactionType: 'hover' });
                if (menuHandler) {
                    console.log("Pushing Menu Handler");
                    activePopupHandlers.push(menuHandler); // Sử dụng biến trong scope listener
                }
            }

            // Khởi tạo Account Handler (nếu có)
            const accountDropdownToggle = document.getElementById('accountDropdownToggle');
            const accountDropdownMenu = document.getElementById('accountDropdownMenu');
            if (accountDropdownToggle && accountDropdownMenu) {
                const accountHandler = createPopupHandler({ triggerElement: accountDropdownToggle, popupElement: accountDropdownMenu, positionFunction: positionAccountDropdown, interactionType: 'click' });
                if (accountHandler) {
                    console.log("Pushing Account Handler");
                    activePopupHandlers.push(accountHandler); // Sử dụng biến trong scope listener
                }
            }
            console.log("Total active handlers initialized:", activePopupHandlers.length);


            // ----- GLOBAL CLICK LISTENER -----
            document.addEventListener('click', function (event) {
                let clickedInsideActiveComponent = false;
                const loginPanel = document.getElementById('ajaxLoginPanel');
                const logoutPanel = document.getElementById('ajaxLogoutConfirmPanel');

                // Kiểm tra click vào popup menu/account
                activePopupHandlers.forEach(handler => { if (handler && handler.isVisible && (handler.triggerElement.contains(event.target) || handler.popupElement.contains(event.target))) { clickedInsideActiveComponent = true; } });

                // Kiểm tra click vào panel login/logout
                if (loginPanel && loginPanel.classList.contains('show') && loginPanel.contains(event.target)) { clickedInsideActiveComponent = true; }
                if (logoutPanel && logoutPanel.classList.contains('show') && logoutPanel.contains(event.target)) { clickedInsideActiveComponent = true; }

                // Nếu không click vào component nào đang active thì đóng popup
                if (!clickedInsideActiveComponent) { activePopupHandlers.forEach(handler => { if (handler && handler.isVisible) { handler.hide(true); } }); }
            }, true);

            // ----- RESIZE LISTENER -----
            let resizeTimeout; window.addEventListener('resize', () => { clearTimeout(resizeTimeout); resizeTimeout = setTimeout(() => { activePopupHandlers.forEach(handler => { if (handler && handler.isVisible) { handler.position(); } }); }, 150); });


            // ----- LOGIC AJAX LOGOUT -----
            const logoutLink = document.getElementById('logoutAjaxLink');
            const logoutPanel = document.getElementById('ajaxLogoutConfirmPanel');
            const confirmLogoutBtn = document.getElementById('ajaxConfirmLogoutBtn');
            const cancelLogoutBtn = document.getElementById('ajaxCancelLogoutBtn');
            const logoutOverlay = logoutPanel;

            if (logoutLink && logoutPanel && confirmLogoutBtn && cancelLogoutBtn && logoutOverlay) {
                logoutLink.addEventListener('click', function (event) {
                    event.preventDefault();
                    logoutPanel.classList.add('show');
                    const accountPopup = document.getElementById('accountDropdownMenu');
                    if (accountPopup && accountPopup.classList.contains('popup-visible')) {
                        const accountHandler = activePopupHandlers?.find(h => h.popupElement === accountPopup); // Tìm handler đã khởi tạo
                        if (accountHandler) { accountHandler.hide(true); }
                        else { accountPopup.classList.remove('popup-visible'); }
                    }
                });
                function closeLogoutPanel() { logoutPanel.classList.remove('show'); }
                cancelLogoutBtn.addEventListener('click', closeLogoutPanel);
                logoutOverlay.addEventListener('click', function (event) { if (event.target === logoutOverlay) { closeLogoutPanel(); } });
                confirmLogoutBtn.addEventListener('click', function () {
                    const tokenInput = document.querySelector('#ajaxLoginForm input[name="__RequestVerificationToken"], form input[name="__RequestVerificationToken"]'); // Tìm token
                    if (!tokenInput || !tokenInput.value) { console.error('AntiForgeryToken not found for logout!'); alert('Lỗi bảo mật.'); return; }
                    const token = tokenInput.value;
                    confirmLogoutBtn.disabled = true; confirmLogoutBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> ...';
                    fetch('/Account/Logout', { method: 'POST', headers: { 'RequestVerificationToken': token, 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'application/json' } })
                        .then(response => { if (response.ok) { window.location.href = '/Account/Login'; } else { console.error('Logout failed:', response.status); response.text().then(text => { alert(`Logout Error (${response.status}): ${text || 'Unknown'}`); }).catch(() => alert(`Logout Error (${response.status})`)); closeLogoutPanel(); } })
                        .catch(error => { console.error('Logout Network error:', error); alert('Lỗi mạng.'); closeLogoutPanel(); })
                        .finally(() => { confirmLogoutBtn.disabled = false; confirmLogoutBtn.innerHTML = 'Xác nhận'; });
                });
            }

            // ----- LOGIC AJAX LOGIN -----
            const loginTrigger = document.getElementById('ajaxLoginTrigger');
            const loginPanelOverlay = document.getElementById('ajaxLoginPanel');

            if (loginTrigger && loginPanelOverlay) {
                const loginPanel = loginPanelOverlay.querySelector('.login-panel');
                const closeLoginBtn = loginPanelOverlay.querySelector('.login-panel-close');
                const loginForm = document.getElementById('ajaxLoginForm');
                const submitLoginBtn = document.getElementById('ajaxLoginSubmitBtn');
                const loginErrorSummary = document.getElementById('ajaxLoginErrorSummary');
                const usernameInput = document.getElementById('ajaxUsername');
                const passwordInput = document.getElementById('ajaxPassword');
                const userTypeSelect = document.getElementById('ajaxUserType');
                const usernameError = document.getElementById('ajaxUsernameError');
                const passwordError = document.getElementById('ajaxPasswordError');
                const userTypeError = document.getElementById('ajaxUserTypeError');

                if (!loginPanel || !closeLoginBtn || !loginForm || !submitLoginBtn) { console.error("Missing elements inside login panel."); return; }

                loginTrigger.addEventListener('click', function () { loginPanelOverlay.classList.add('show'); });
                function closeLoginPanelFunc() { loginPanelOverlay.classList.remove('show'); clearLoginErrorsFunc(); loginForm.reset(); }
                closeLoginBtn.addEventListener('click', closeLoginPanelFunc);
                loginPanelOverlay.addEventListener('click', function (event) { if (event.target === loginPanelOverlay) { closeLoginPanelFunc(); } });
                function clearLoginErrorsFunc() { if (usernameError) usernameError.textContent = ''; if (passwordError) passwordError.textContent = ''; if (userTypeError) userTypeError.textContent = ''; if (loginErrorSummary) { loginErrorSummary.textContent = ''; loginErrorSummary.style.display = 'none'; } if (usernameInput) usernameInput.classList.remove('is-invalid'); if (passwordInput) passwordInput.classList.remove('is-invalid'); if (userTypeSelect) userTypeSelect.classList.remove('is-invalid'); }
                function displayLoginErrorsFunc(errorData) { clearLoginErrorsFunc(); console.log("Login Error:", errorData); if (errorData && typeof errorData === 'object') { if (errorData.errors && typeof errorData.errors === 'object') { let g = []; for (const k in errorData.errors) { const m = Array.isArray(errorData.errors[k]) ? errorData.errors[k].join('; ') : errorData.errors[k]; const lk = k.toLowerCase(); if (lk === 'username' && usernameError && usernameInput) { usernameError.textContent = m; usernameInput.classList.add('is-invalid'); } else if (lk === 'password' && passwordError && passwordInput) { passwordError.textContent = m; passwordInput.classList.add('is-invalid'); } else if (lk === 'usertype' && userTypeError && userTypeSelect) { userTypeError.textContent = m; userTypeSelect.classList.add('is-invalid'); } else { g.push(`${k}: ${m}`); } } if (g.length > 0 && loginErrorSummary) { loginErrorSummary.innerHTML = g.join('<br>'); loginErrorSummary.style.display = 'block'; } } else if (errorData.message && loginErrorSummary) { loginErrorSummary.textContent = errorData.message; loginErrorSummary.style.display = 'block'; } else if (loginErrorSummary) { loginErrorSummary.textContent = 'Lỗi không rõ từ server.'; loginErrorSummary.style.display = 'block'; } } else if (loginErrorSummary) { loginErrorSummary.textContent = errorData || 'Lỗi không xác định.'; loginErrorSummary.style.display = 'block'; } }

                loginForm.addEventListener('submit', function (event) {
                    event.preventDefault(); clearLoginErrorsFunc();
                    submitLoginBtn.disabled = true; submitLoginBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Đang đăng nhập...';
                    const formData = new FormData(loginForm);
                    const tokenInput = loginForm.querySelector('input[name="__RequestVerificationToken"]'); // Lấy token từ chính form login
                    if (!tokenInput || !tokenInput.value) { console.error('AntiForgeryToken not found in login form!'); displayLoginErrorsFunc({ message: 'Lỗi bảo mật.' }); submitLoginBtn.disabled = false; submitLoginBtn.innerHTML = '<i class="fas fa-sign-in-alt me-1"></i> Đăng nhập'; return; }
                    const token = tokenInput.value;

                    fetch(loginForm.action, { method: 'POST', headers: { 'RequestVerificationToken': token, 'X-Requested-With': 'XMLHttpRequest', 'Accept': 'application/json' }, body: formData })
                        .then(async response => {
                            const contentType = response.headers.get("content-type");
                            if (response.ok) {
                                if (contentType && contentType.includes("application/json")) { const result = await response.json(); if (result.success && result.redirectUrl) { window.location.href = result.redirectUrl; } else { displayLoginErrorsFunc({ message: result.message || 'Phản hồi không hợp lệ.' }); } }
                                else { const text = await response.text(); console.warn("OK but not JSON:", text); displayLoginErrorsFunc({ message: `Phản hồi không đúng định dạng (${response.status}).` }); }
                            } else {
                                if (contentType && contentType.includes("application/json")) { const errorData = await response.json(); displayLoginErrorsFunc(errorData); }
                                else { const errorText = await response.text(); console.error("Error (non-JSON):", errorText); displayLoginErrorsFunc({ message: `Lỗi ${response.status}. Vui lòng thử lại.` }); }
                            }
                        })
                        .catch(error => { console.error('Network error:', error); displayLoginErrorsFunc({ message: 'Lỗi kết nối mạng.' }); })
                        .finally(() => { submitLoginBtn.disabled = false; submitLoginBtn.innerHTML = '<i class="fas fa-sign-in-alt me-1"></i> Đăng nhập'; });
                });
            }

        }); // Kết thúc DOMContentLoaded
    </script>
    @* ============================================================= *@

    <!-- Optional: Custom site-specific JavaScript -->
    <script src="~/js/site.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>